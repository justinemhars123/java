class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}
class DoublyLinkedList {
    Node head;
    Node tail;

    public DoublyLinkedList() {
        head = null;
        tail = null;
    }

    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
     public void display() {
        Node current = head;
        if (current == null) {
            System.out.println("The list is empty.");
            return;
        }
        
        System.out.print("Doubly Linked List: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

    // Add other methods as needed, e.g., removeNode, search, printList, etc.

import java.util.*;

public class Main{
    public static void main(String[] args) {
      Scanner in = new Scanner (System.in);
        DoublyLinkedList myList = new DoublyLinkedList();
         
        while(true){
               System.out.println("\n1. Initialize the list");
               System.out.println("2. Determine whether the list is empty");
               System.out.println("3. Find the lenght of the list");
               System.out.println("4. Output the list");
               System.out.println("5. Search the list for given item");
               System.out.println("6. Retrieve the first element of the list");
               System.out.println("7. Retrieve the last element of the list");
               System.out.println("8. Insert an item in the list");
               System.out.println("9. Delete an item from the list");
               
             int choose = in.nextInt();  
            
        
         switch(choose){
                    case 1:
                        System.out.println("Enter number");
                        int initialize = in.nextInt();
                        myList.addNode(initialize);
                        myList.display();
                        
         
         }
        // Insert some elements into the doubly linked list
      //   myList.insertAtEnd(1);
//         myList.insertAtEnd(2);
//         myList.insertAtEnd(3);
// 
//         // Display the contents of the list
//         myList.display();
    }
}
}
