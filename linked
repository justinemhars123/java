import java.util.Scanner;

public class LinkedListScanner {
    static class Node {
        int data;
        Node next;

        Node(int value) {
            data = value;
            next = null;
        }
    }

    static Node head;

    // Display the list
    static void printList() {
        Node current = head;
        System.out.print("\nLinked List: [");

        while (current != null) {
            System.out.print(" " + current.data + " ");
            current = current.next;
        }

        System.out.print("\n");
    }

    // Insertion at the beginning
    static void insertAtBegin(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Insertion at the end
    static void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    // Insertion at a specific position
    static void insertAtPosition(int data, int position) {
        Node newNode = new Node(data);
        if (position == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node current = head;
        int count = 0;

        while (count < position - 1 && current != null) {
            current = current.next;
            count++;
        }

        if (current == null) {
            System.out.println("Try again, the position is invalid.");
        } else {
            newNode.next = current.next;
            current.next = newNode;
        }
    }

    // Delete from the beginning
    static void deleteFromBegin() {
        if (head != null) {
            head = head.next;
            System.out.println("The element is successfully removed.");
        } else {
            System.out.println("!EMPTY LIST! Nothing to delete.");
        }
    }

    // Delete from the end
    static void deleteFromEnd() {
        if (head == null) {
            System.out.println("!EMPTY LIST! Nothing to delete.");
            return;
        }

        if (head.next == null) {
            head = null;
            return;
        }

        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    // Delete from a specific position
    static void deleteFromPosition(int position) {
        if (head == null) {
            System.out.println("!EMPTY LIST! Nothing to delete.");
            return;
        }

        if (position == 0) {
            head = head.next;
            return;
        }

        Node current = head;
        int count = 0;

        while (count < position - 1 && current != null) {
            current = current.next;
            count++;
        }

        if (current == null || current.next == null) {
            System.out.println("Try again, the position is invalid.");
        } else {
            current.next = current.next.next;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;
        int data, position;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Insert at the beginning");
            System.out.println("2. Insert at the end");
            System.out.println("3. Insert at a specific position of the node");
            System.out.println("4. Delete from the beginning");
            System.out.println("5. Delete from the end");
            System.out.println("6. Delete from a specific position");
            System.out.println("7. Display the list");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to insert at the beginning: ");
                    data = scanner.nextInt();
                    insertAtBegin(data);
                    printList();
                    break;
                case 2:
                    System.out.print("Enter value to insert at the end: ");
                    data = scanner.nextInt();
                    insertAtEnd(data);
                    printList();
                    break;
                case 3:
                    System.out.print("Enter position to insert at: ");
                    position = scanner.nextInt();
                    System.out.print("Enter value to insert: ");
                    data = scanner.nextInt();
                    insertAtPosition(data, position);
                    printList();
                    break;
                case 4:
                    deleteFromBegin();
                    printList();
                    break;
                case 5:
                    deleteFromEnd();
                    printList();
                    break;
                case 6:
                    System.out.print("Enter position to delete from: ");
                    position = scanner.nextInt();
                    deleteFromPosition(position);
                    printList();
                    break;
                case 7:
                    printList();
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Try again, your choice is invalid.");
            }
        } while (choice != 0);

        scanner.close();
    }
}
